/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
#ifndef QueueService_H
#define QueueService_H

#include <TProcessor.h>
#include <Thrift.h>
#include <TApplicationException.h>
#include <protocol/TProtocol.h>
#include <transport/TTransport.h>



class QueueServiceIf {
 public:
  virtual ~QueueServiceIf() {}
  virtual bool ping() = 0;
  virtual void addToQueue(const int32_t submissionID, const int32_t taskType, const std::string& payload) = 0;
};

class QueueServiceNull : virtual public QueueServiceIf {
 public:
  virtual ~QueueServiceNull() {}
  bool ping() {
    bool _return = false;
    return _return;
  }
  void addToQueue(const int32_t /* submissionID */, const int32_t /* taskType */, const std::string& /* payload */) {
    return;
  }
};


class QueueService_ping_args {
 public:

  QueueService_ping_args() {
  }

  virtual ~QueueService_ping_args() throw() {}


  bool operator == (const QueueService_ping_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const QueueService_ping_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QueueService_ping_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class QueueService_ping_pargs {
 public:


  virtual ~QueueService_ping_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _QueueService_ping_result__isset {
  _QueueService_ping_result__isset() : success(false) {}
  bool success;
} _QueueService_ping_result__isset;

class QueueService_ping_result {
 public:

  QueueService_ping_result() : success(0) {
  }

  virtual ~QueueService_ping_result() throw() {}

  bool success;

  _QueueService_ping_result__isset __isset;

  bool operator == (const QueueService_ping_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const QueueService_ping_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QueueService_ping_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _QueueService_ping_presult__isset {
  _QueueService_ping_presult__isset() : success(false) {}
  bool success;
} _QueueService_ping_presult__isset;

class QueueService_ping_presult {
 public:


  virtual ~QueueService_ping_presult() throw() {}

  bool* success;

  _QueueService_ping_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _QueueService_addToQueue_args__isset {
  _QueueService_addToQueue_args__isset() : submissionID(false), taskType(false), payload(false) {}
  bool submissionID;
  bool taskType;
  bool payload;
} _QueueService_addToQueue_args__isset;

class QueueService_addToQueue_args {
 public:

  QueueService_addToQueue_args() : submissionID(0), taskType(0), payload("") {
  }

  virtual ~QueueService_addToQueue_args() throw() {}

  int32_t submissionID;
  int32_t taskType;
  std::string payload;

  _QueueService_addToQueue_args__isset __isset;

  bool operator == (const QueueService_addToQueue_args & rhs) const
  {
    if (!(submissionID == rhs.submissionID))
      return false;
    if (!(taskType == rhs.taskType))
      return false;
    if (!(payload == rhs.payload))
      return false;
    return true;
  }
  bool operator != (const QueueService_addToQueue_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QueueService_addToQueue_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class QueueService_addToQueue_pargs {
 public:


  virtual ~QueueService_addToQueue_pargs() throw() {}

  const int32_t* submissionID;
  const int32_t* taskType;
  const std::string* payload;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class QueueService_addToQueue_result {
 public:

  QueueService_addToQueue_result() {
  }

  virtual ~QueueService_addToQueue_result() throw() {}


  bool operator == (const QueueService_addToQueue_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const QueueService_addToQueue_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QueueService_addToQueue_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class QueueService_addToQueue_presult {
 public:


  virtual ~QueueService_addToQueue_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class QueueServiceClient : virtual public QueueServiceIf {
 public:
  QueueServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  QueueServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  bool ping();
  void send_ping();
  bool recv_ping();
  void addToQueue(const int32_t submissionID, const int32_t taskType, const std::string& payload);
  void send_addToQueue(const int32_t submissionID, const int32_t taskType, const std::string& payload);
  void recv_addToQueue();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class QueueServiceProcessor : virtual public ::apache::thrift::TProcessor {
 protected:
  boost::shared_ptr<QueueServiceIf> iface_;
  virtual bool process_fn(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, std::string& fname, int32_t seqid);
 private:
  std::map<std::string, void (QueueServiceProcessor::*)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*)> processMap_;
  void process_ping(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void process_addToQueue(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
 public:
  QueueServiceProcessor(boost::shared_ptr<QueueServiceIf> iface) :
    iface_(iface) {
    processMap_["ping"] = &QueueServiceProcessor::process_ping;
    processMap_["addToQueue"] = &QueueServiceProcessor::process_addToQueue;
  }

  virtual bool process(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot);
  virtual ~QueueServiceProcessor() {}
};

class QueueServiceMultiface : virtual public QueueServiceIf {
 public:
  QueueServiceMultiface(std::vector<boost::shared_ptr<QueueServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~QueueServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<QueueServiceIf> > ifaces_;
  QueueServiceMultiface() {}
  void add(boost::shared_ptr<QueueServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  bool ping() {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->ping();
      } else {
        ifaces_[i]->ping();
      }
    }
  }

  void addToQueue(const int32_t submissionID, const int32_t taskType, const std::string& payload) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->addToQueue(submissionID, taskType, payload);
    }
  }

};



#endif
