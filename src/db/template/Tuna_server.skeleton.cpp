// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

/* ovo je thriftov Tuna/h */
#include "Tuna.h"
#include <protocol/TBinaryProtocol.h>
#include <server/TSimpleServer.h>
#include <transport/TServerSocket.h>
#include <transport/TBufferTransports.h>

#include <tuna.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

using namespace eval::tuna;

class TunaHandler : virtual public TunaIf {
 public:
  TunaHandler() {
    // Your initialization goes here
  }

  bool ping() {
    printf("ping\n");
    return true;
  }

  void simpleQuery(simpleQ& _return, const std::string& qname, const std::vector<std::string> & data) {
    printf("simpleQuery\n");
    _return = T_.simpleQuery(qname, data);
  }

  void doubleQuery(doubleQ& _return, const std::string& qname, const std::vector<std::string> & data) {
    printf("doubleQuery\n");
    _return = T_.doubleQuery(qname, data);
  }

  void fullQuery(fullQ& _return, const std::string& qname, const std::vector<std::string> & data) {
    printf("fullQuery\n");
    _return = T_.fullQuery(qname, data);
  }

  void reserveFrom(simpleQ& _return, const std::string& qname, const std::vector<std::string> & data) {
    printf("reserveFrom\n");
    _return = T_.reserveFrom(qname, data);
  }

  void reserve(const std::vector<int32_t> & ids) {
    printf("reserve\n");
    T_.reserve(ids);
  }

  bool destroy(const int32_t id) {
    printf("destroy\n");
    return T_.destroy(id);
  }

  void getTask(eval::model::Task& _return, const int32_t id) {
    printf("getTask\n");
    vector<eval::model::Task> sol =
      T_.multiGet<eval::model::Task>(vector<object_id> (1,id));

    _return = sol.size() ? sol.at(0) : eval::model::Task();
  }

  void getTasks(std::vector<eval::model::Task> & _return, const std::vector<int32_t> & ids) {
    printf("getTasks\n");
    _return = T_.multiGet<eval::model::Task>(ids);
  }

  void getTasksFrom(std::vector<eval::model::Task> & _return, const std::string& qname, const std::vector<std::string> & data) {
    printf("getTasksFrom\n");
    _return = T_.getFrom<eval::model::Task>(qname, data);
  }

  bool updateTask(const eval::model::Task& task) {
    printf("updateTask\n");
    return T_.update("tasks", serialize(task)); 
  }

  int32_t insertTask(const eval::model::Task& task) {
    printf("insertTask\n");
    return T_.insert("tasks", serialize(task)); 
  }

  void getTestCase(eval::model::TestCase& _return, const int32_t id) {
    printf("getTestCase\n");
    vector<eval::model::TestCase> sol =
      T_.multiGet<eval::model::TestCase>(vector<object_id> (1,id));

    _return = sol.size() ? sol.at(0) : eval::model::TestCase();
  }

  void getTestCases(std::vector<eval::model::TestCase> & _return, const std::vector<int32_t> & ids) {
    printf("getTestCases\n");
    _return = T_.multiGet<eval::model::TestCase>(ids);
  }

  void getTestCasesFrom(std::vector<eval::model::TestCase> & _return, const std::string& qname, const std::vector<std::string> & data) {
    printf("getTestCasesFrom\n");
    _return = T_.getFrom<eval::model::TestCase>(qname, data);
  }

  bool updateTestCase(const eval::model::TestCase& test_case) {
    printf("updateTestCase\n");
    return T_.update("test_cases", serialize(test_case)); 
  }

  int32_t insertTestCase(const eval::model::TestCase& test_case) {
    printf("insertTestCase\n");
    return T_.insert("test_cases", serialize(test_case)); 
  }

  void getSubmission(eval::model::Submission& _return, const int32_t id) {
    printf("getSubmission\n");
    vector<eval::model::Submission> sol =
      T_.multiGet<eval::model::Submission>(vector<object_id> (1,id));

    _return = sol.size() ? sol.at(0) : eval::model::Submission();
  }

  void getSubmissions(std::vector<eval::model::Submission> & _return, const std::vector<int32_t> & ids) {
    printf("getSubmissions\n");
    _return = T_.multiGet<eval::model::Submission>(ids);
  }

  void getSubmissionsFrom(std::vector<eval::model::Submission> & _return, const std::string& qname, const std::vector<std::string> & data) {
    printf("getSubmissionsFrom\n");
    _return = T_.getFrom<eval::model::Submission>(qname, data);
  }

  bool updateSubmission(const eval::model::Submission& submission) {
    printf("updateSubmission\n");
    return T_.update("submissions", serialize(submission)); 
  }

  int32_t insertSubmission(const eval::model::Submission& submission) {
    printf("insertSubmission\n");
    return T_.insert("submissions", serialize(submission)); 
  }

  void getJob(eval::model::Job& _return, const int32_t id) {
    printf("getJob\n");
    vector<eval::model::Job> sol =
      T_.multiGet<eval::model::Job>(vector<object_id> (1,id));

    _return = sol.size() ? sol.at(0) : eval::model::Job();
  }

  void getJobs(std::vector<eval::model::Job> & _return, const std::vector<int32_t> & ids) {
    printf("getJobs\n");
    _return = T_.multiGet<eval::model::Job>(ids);
  }

  void getJobsFrom(std::vector<eval::model::Job> & _return, const std::string& qname, const std::vector<std::string> & data) {
    _return = T_.getFrom<eval::model::Job>(qname, data);
    printf("getJobsFrom\n");
  }

  bool updateJob(const eval::model::Job& job) {
    return T_.update("jobs", serialize(job)); 
    printf("updateJob\n");
  }

  int32_t insertJob(const eval::model::Job& job) {
    return T_.insert("jobs", serialize(job));
    printf("insertJob\n");
  }

 private:
  Tuna T_;

};

int main(int argc, char **argv) {
  int port = 9090;
  shared_ptr<TunaHandler> handler(new TunaHandler());
  shared_ptr<TProcessor> processor(new TunaProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

